<?xml version="1.0" encoding="UTF-8"?>
<chapter id="configuration">
  <title>AFP ファイルサーバーのセットアップ</title>

  <sect1>
    <title>ファイルサービス<indexterm>
        <primary>ファイルサービス</primary>

        <secondary>Netatalk のファイルサービス</secondary>
      </indexterm></title>

    <para>Netatalk は AFP<indexterm>
        <primary>AFP</primary>

        <secondary>Apple Filing Protocol</secondary>
      </indexterm> サービスを提供するものである．</para>

    <sect2>
      <title>AFP ファイルサーバーのセットアップ</title>

      <para>AFP (Apple Filing Protocol) はアップル・マッキントッシュがファイル共有時に用いるプロトコルである．
      AFP プロトコルは年を追うごとに進展を見せ，最新の変更は Snow Leopard<indexterm>
          <primary>Snow Leopard</primary>

          <secondary>Mac OS X 10.6</secondary>
        </indexterm> (Mac OS X 10.6) のリリースにあわせて加えられた "AFP 3.3" である．</para>

      <para>afpd デーモンはアップルのクライアントに対してファイルサービスを提供する．唯一必要な設定ファイルは  
      <filename>afp.conf</filename> のみで，"ini" スタイルの構文で記述する．</para>

      <para><link linkend="spotlight">Spotlight</link><indexterm>
          <primary>Spotlight</primary>
        </indexterm> サポートは Netatalk 3.1 より加えられた．Spotlight をサポートした Netatalk を
      コンパイルするための情報はこの<link linkend="spotlight-compile">節</link>を参照のこと．</para>

      <para>Mac OS X 10.5 (Leopard) で，AFP 経由での Time Machine バックアップがサポートされるようになった．
      二つの新機能で，バックアップをただサーバーのキャッシュにではなく，
      動作中のディスクに書き込むことを確実にしている．ホストのオペレーティングシステムが異なると，
      このキャッシュをフラッシュする挙動も異なる．ヴォリュームを作成するために，
      Time Machine ターゲットはボリュームオプション "<option>time machine = yes</option>" を使用する．</para>

      <para>Netatalk 2.1 以降では UNIX シンボリックリンク<indexterm>
          <primary>symlink</primary>

          <secondary>UNIX symlink</secondary>
        </indexterm>を使うことができる．その動作は例えば NFS と同じである，
      すなわち，Netatalk はサーバー側でシンボリックリンクを追わないが，
      クライアント側でシンボリックリンクを解決し切るのではなく，
      結果としてクライアントのファイルシステムの認識内でしかるべき場所を示すリンクとなる．</para>

      <sect3>
        <title>afp.conf</title>

        <para><filename>afp.conf</filename> は AFP ファイルサーバーの動作と設定，
        及びサーバーが提供する AFP ボリュームを指示するのに用いられる設定ファイルである．</para>

        <para><filename>afp.conf</filename> は２つのサーバーセクションに分割できる．すなわち：
          <variablelist>
            <varlistentry>
              <term>[Global]</term>

              <listitem>
                <para>グローバルセクションで基本的なサーバーオプションを定義する</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>[Homes]</term>

              <listitem>
                <para>ホームセクションでユーザーのホームボリュームを定義する</para>
              </listitem>
            </varlistentry>
          </variablelist><option>Global</option> でもなく <option>Homes</option>  でもなければ，
        それは単なる一つの AFP ボリュームである，と解釈される</para>

        <para>ユーザーのホームディレクトリを共有するためには <option>Homes</option> を定義し，
        <option>basedir regex</option> オプションを明記しなければならない．</para>

        <para>例：</para>

        <para><programlisting>[Homes]
basedir regex = /home
</programlisting></para>

        <para>この場合，AFP サーバーにログインできるユーザーはそれぞれ <filename>/home/NAME</filename> 
        というパス名でのユーザーボリュームを使用できる．</para>

        <para>より複雑に，膨大な数のユーザーホームを，
        例えば下記のように２つの異なるファイルシステムに分けて管理するサーバーを構築することもできる：
          <itemizedlist>
            <listitem>
              <para>/RAID1/homes</para>
            </listitem>

            <listitem>
              <para>/RAID2/morehomes</para>
            </listitem>
          </itemizedlist>そのための設定は：<programlisting>[Homes]
basedir regex = /RAID./.*homes
</programlisting>である．</para>

        <para>もし，<option>basedir regex</option> にシンボリックリンクが含まれる場合，
        正規化された絶対パスを指定すべきである．つまり，パス <filename>/home</filename> から 
        <filename>/usr/home</filename> にシンボリックリンクがはられていた場合：<programlisting>[Homes]
basedir regex = /usr/home</programlisting></para>

        <para>他の使用できるオプションの詳細な解説については <citerefentry>
            <refentrytitle>afp.conf</refentrytitle>

            <manvolnum>5</manvolnum>
          </citerefentry> の man page を参照いただきたい．</para>
      </sect3>
    </sect2>

    <sect2 id="CNID-backends">
      <title>CNID<indexterm>
          <primary>CNID</primary>

          <secondary>Catalog Node ID</secondary>
        </indexterm> バックエンド<indexterm>
          <primary>Backend</primary>

          <secondary>CNID backend</secondary>
        </indexterm></title>

      <para>SMB や NFS のようなほかのプロトコルとは異なり，ほとんどの場合，
      AFP プロトコルはファイルやディレクトリをパスではなく ID を通して参照している．
      （その ID は CNID とも言われ，カタログ・ノード ID (Catalog Node ID) の略である）
      典型的には，まず AFP リクエストで，例えば，<phrase>“サーバーさん id 167 のディレクトリにある，
      ファイル名 'Test' というのを開いてください．”</phrase>といった調子でディレクトリ ID<indexterm>
          <primary>DID</primary>

          <secondary>Directory ID</secondary>
        </indexterm>とファイル名を用いる． 
      </para>

      <para>AFP ボリュームにある各々のファイルに一意のファイル ID<indexterm>
          <primary>FID</primary>

          <secondary>File ID</secondary>
        </indexterm> が割り当てられる．仕様により ID は絶対に再利用禁止であり，ID は 32 bit の数字である．
      （ディレクトリ ID は共通の ID プールを使用する）このため，
      ある AFP ボリュームにおよそ 40 億個以上のファイル・フォルダーを書き込むと，
      その時点で ID プールが枯渇され，当該ボリュームへの新ファイルの書き込みができなくなる．
      愚痴はなしということでお願いしたい :-)</para>

      <para>Netatalk はホストのファイルシステム内で 
      ID とファイルあるいはフォルダーのマップ（ID との対応付け）をする必要がある．
      それを実現するためにいくつかの異なる CNID バックエンド<indexterm>
          <primary>CNID backend</primary>
        </indexterm>が用意されていて，<citerefentry>
          <refentrytitle>afp.conf</refentrytitle>

          <manvolnum>5</manvolnum>
        </citerefentry> 設定ファイル内で <option>cnid
      scheme</option><indexterm>
          <primary>cnidscheme</primary>

          <secondary>specifying a CNID backend</secondary>
        </indexterm> オプションで選択が可能である．CNID バックエンドは基本的には，
        ストアされた ID &lt;-&gt; 名前を一対一対応させるデータベースである．</para>

      <para>The CNID データベースはデフォルトで <filename>/var/netatalk/CNID</filename> に置かれる．</para>

      <para>CNID データベースの検証・修復・再構築のために用いることができる <command>dbd</command> 
      という名のコマンドが用意されていている．</para>

      <note>
        <para>netatalk で作業する上で，いくつかの CNID に関する点を留意しておかなければならない．
        すなわち：</para>

        <itemizedlist>
          <listitem>
            <para>ボリュームをネスト（入れ子）にしてはならない．<indexterm>
                <primary>Nested volumes</primary>
              </indexterm></para>
          </listitem>

          <listitem>
            <para>CNID バックエンドはデータベースである．
            それ故 afpd はファイルサーバーとデータベースの混成物とならしめている．</para>
          </listitem>

          <listitem>
            <para>もしファイルシステムに空き容量がなくなった場合，データベースは破損するかもしれない．
            それを回避するために取る策としては，<option>vol dbpath</option> オプションを使用して，
            データベースファイルをどこか別の場所に置く，か，クオータ<indexterm>
                <primary>Quotas</primary>

                <secondary>Disk usage quotas</secondary>
            </indexterm>を使っているならば CNID 
            データベースフォルダーがクオータなしでユーザー／グループのオーナーとなっているか確認する．
            のいずれかである．</para>
          </listitem>

          <listitem>
            <para>NFS 経由でマウントされているボリュームの CNID データベースには注意すべきである．
            いずれにしろそのような構成にすると決める事自体かなり無謀である．
            が，さらにデータベースもその上に置くとなると決定的にトラブルの元となる．要はデータベースの破損である．
            もしどうしても NFS<indexterm>
                <primary>NFS</primary>

                <secondary>Network File System</secondary>
              </indexterm> マウントしたボリュームを使わねばならない場合は <option>vol dbpath</option> 
            ディレクティブを使用してデータベースをローカルディスクに置くべきである．</para>
          </listitem>
        </itemizedlist>
      </note>

      <sect3>
        <title>cdb<indexterm>
            <primary>CDB</primary>

            <secondary>"cdb" CNID backend</secondary>
          </indexterm></title>

        <para>“コンカレント（concurrent:同時進行）データベース”は 
        Berkeley DB を基礎としたものである．
        このバックエンドだと複数の afpd デーモンが CNID データベースに直接アクセスできる．
        たとえ複数の afpd プロセスがあるボリュームに対して動作中の場合でも 
        同期アクセスについては Berkeley DB ロック機構が全て負ってくれる． 
        欠点としては，
        一つの afpd プロセスのクラッシュのみでデータベースの破損するかもしれないという点である．
        cdb は数多くのユーザーのホームディレクトリを共有するときのみ使用すべきで，
        <emphasis>かつ</emphasis>，
        多数の <command>cnid_dbd</command> プロセスという状態は確実に問題を引き起こすということである．</para>
      </sect3>

      <sect3>
        <title>dbd<indexterm>
            <primary>DBD</primary>

            <secondary>"dbd" CNID backend</secondary>
          </indexterm></title>

        <para>CNID データベースへのアクセスは cnid_dbd デーモンプロセスのみに制限されている．
        afpd プロセスはデータベースの読み込みと更新のために cnid_dbd デーモン とやりとりをする．
        データベースが破損する可能性は経験的にはゼロである．</para>

        <para>本バックエンドは Netatalk 2.1 以来，デフォルトのバックエンドとなっている．</para>
      </sect3>

      <sect3>
        <title>tdb<indexterm>
            <primary>tdb</primary>

            <secondary>"tdb" CNID backend</secondary>
          </indexterm></title>

        <para><abbrev>tdb</abbrev> はまた別の永続性のある CNID データベースの一つであり，
        Samba の <emphasis>Trivial Database（軽量データベース）</emphasis>のことでもある．
        ユーザーボリューム用として <abbrev>cdb</abbrev> の代わりに使用することもできる．
          <important>
            <para>本バックエンドは，いかなる場合でも，共有されても<emphasis>なく</emphasis>，
            複数のクライアントが一度にアクセスすることも<emphasis>ない</emphasis>
            ボリュームにのみ使用すること．</para>
          </important><abbrev>tdb</abbrev> はメモリーにデータを保持するデータベースとして動作できるので，
        このバックエンドは内部向けに（メモリーにデータを保持する CNID データベースとして），
        最初のデータベースが開けない時など，予備として用いることもできる．
        これはもちろん再起動にすると CNID は失われるということを意味している．</para>
      </sect3>

      <sect3>
        <title>last<indexterm>
            <primary>Last</primary>

            <secondary>"last" CNID backend</secondary>
          </indexterm></title>

        <para>last バックエンドはメモリーにデータを保持する tdb データベースである．それ故永続性がない．
        netatalk 3.0 からは，それは自動的に<emphasis>読み込み専用モード</emphasis>になる．
        このバックエンドは例えば CD-ROM などに有用である．</para>
      </sect3>

      <sect3>
        <title>mysql<indexterm>
            <primary>MySQL</primary>

            <secondary>"mysql" CNID backend</secondary>
          </indexterm></title>

        <para>CNID バックエンドは MySQL サーバーを使用する．</para>
      </sect3>
    </sect2>

    <sect2 id="charsets">
      <title>Charsets<indexterm>
          <primary>Charset</primary>

          <secondary>character set</secondary>
        </indexterm>/Unicode<indexterm>
          <primary>Unicode</primary>
        </indexterm></title>

      <para></para>

      <sect3>
        <title>なぜ Unicode？</title>

        <para>内部的には，コンピューターは文字（キャラクター）について，
        テキストについて何も知らない，唯一“数字（数）”ならコンピュータにもわかる．
        それ故各々の“字”には“数”が割り当てられている．キャラクターセット，しばしば
        <emphasis>charset</emphasis> あるいは
        <emphasis>codepage</emphasis><indexterm>
            <primary>Codepage</primary>
          </indexterm> とも呼ばれるが，これは“数”と“字”の一対一対応を規定している．</para>

        <para>二つあるいはそれ以上のコンピューターがお互いに通信する場合，
        各々は同じキャラクターセットを使う必要がある．1960 年代には ASCII<indexterm>
            <primary>ASCII</primary>

            <secondary>American Standard Code for Information
            Interchange</secondary>
          </indexterm> (American Standard Code for Information Interchange) 
        キャラクターセットが 
        ASA（米国標準協会：the American Standards Association）によって標準化された．
        オリジナルの ASCII 形式は，
        英語で用いられるアルファベット及び数字を網羅するのに必要な数より多い 128 
        のキャラクターを表している．
        ASCII は今日においてもコンピューターで使われるキャラクタースキームである．</para>

        <para>国際的にもっと都合よく，そして若干内輪向けの記号文字を含めるために，
        つづくバージョンでは 256 のキャラクターを規定した．
        このエンコードの仕様だと一文字はきっちり 1 バイトに収まるが，
        256 キャラクターというのは，
        いろいろな言語で用いる全ての文字を一つのキャラクターに一対一対応させるのに十分ではなかった．
        </para>

        <para>結果的には後にローカライズされたキャラクターセットが規定された．
        例えば ISO-8859 キャラクターセットである．
        ほとんどのオペレーティングシステムベンダーは各々の要求を満たすために，
        独自のキャラクターセットを導入した．すなわち IBM であれば 
        <emphasis>コードページ 437 (DOSLatinUS)</emphasis>，アップルは 
        <emphasis>MacRoman</emphasis><indexterm>
            <primary>MacRoman</primary>

            <secondary>MacRoman charset</secondary>
          </indexterm> コードページ，などである．
        127 以上のキャラクターが定義されているものを<emphasis>拡張</emphasis>
        キャラクターと呼ぶ．
        これらのキャラクターセットはお互いに異なるキャラクターに同じ番号をふってあるので衝突を起こす．</para>

        <para>そういったキャラクターセットのほぼ全てが 256 個のキャラクターを定義していて，
        最初の 128 個（0 から 127 まで）のキャラクターを ASCII と同一対応となるようにしている．
        結果的に違ったコードページを使っているシステム同士でコミュニケーションを効率よくするためには，
        ASCII キャラクターセットに限定で行うしかない．</para>

        <para>この問題をすっぱり解決するために，より大きいキャラクターセットが規定された．
        より多くのキャラクターマッピングの場所を確保するために，
        これらのキャラクターセットは一つのキャラクターのために最低でも 2 バイトを指定する．
        このためそういったキャラクターセットは<emphasis>マルチバイト</emphasis>
        キャラクターセットと呼ばれる．</para>

        <para>標準的なマルチバイトキャラクターエンコード方式として知られているものの一つとして
        <ulink url="http://www.unicode.org/">ユニコード</ulink>がある．
        マルチバイトキャラクターセットの大きな利点として“それ一つで済む”がある．
        二つのコンピューターが通信しているときに両者が同一のキャラクターセットを使用しているか確認する必要がない．</para>
      </sect3>

      <sect3>
        <title>Apple で使われている（使われていた）キャラクターセット</title>

        <para>過去に Apple クライアントは，
        ネットワーク間の通信のためにシングルバイトのキャラクターセットを使用していた．
        年を経るに従い，Apple はいくつものキャラクターセットを定義したが，
        欧米ユーザーは <emphasis>MacRoman</emphasis> コードセットを最もよく使用するであろう．</para>

        <para>Apple の定義したコードページに含まれるもの：</para>

        <itemizedlist>
          <listitem>
            <para>MacArabic, MacFarsi</para>
          </listitem>

          <listitem>
            <para>MacCentralEurope</para>
          </listitem>

          <listitem>
            <para>MacChineseSimple</para>
          </listitem>

          <listitem>
            <para>MacChineseTraditional</para>
          </listitem>

          <listitem>
            <para>MacCroation</para>
          </listitem>

          <listitem>
            <para>MacCyrillic</para>
          </listitem>

          <listitem>
            <para>MacDevanagari</para>
          </listitem>

          <listitem>
            <para>MacGreek</para>
          </listitem>

          <listitem>
            <para>MacHebrew</para>
          </listitem>

          <listitem>
            <para>MacIcelandic</para>
          </listitem>

          <listitem>
            <para>MacJapanese</para>
          </listitem>

          <listitem>
            <para>MacKorean</para>
          </listitem>

          <listitem>
            <para>MacRoman</para>
          </listitem>

          <listitem>
            <para>MacRomanian</para>
          </listitem>

          <listitem>
            <para>MacThai</para>
          </listitem>

          <listitem>
            <para>MacTurkish</para>
          </listitem>
        </itemizedlist>

        <para>Mac OS X 以降そして AFP3 以降では <ulink url="http://www.utf-8.com/">UTF-8</ulink> 
        が用いられる．UTF-8 は Unicode キャラクターを ASCII 互換のままエンコードする．
        各々の Unicode キャラクターは一個から六個の ASCII キャラクターにエンコードされる．
        故に， UTF-8 自体はキャラクターセットではなく，ユニコードキャラクターセットのエンコードである．</para>

        <para>厄介なことにも Unicode はいくつかの <emphasis> <ulink
        url="http://www.unicode.org/reports/tr15/index.html">normalization（正規化）</ulink>
        </emphasis>方式を規定している．<ulink 
        url="http://www.samba.org">Samba</ulink><indexterm>
            <primary>Samba</primary>
          </indexterm> はほとんどの Unix ツールも好んで用いる 
        <emphasis>precomposed</emphasis><indexterm>
            <primary>Precomposed</primary>

            <secondary>Precomposed Unicode normalization</secondary>
          </indexterm> Unicode を使用する．一方 Apple は 
        <emphasis>decomposed</emphasis><indexterm>
            <primary>Decomposed</primary>

            <secondary>Decomposed Unicode normalization</secondary>
          </indexterm> normalization を使うことに決めた．</para>

        <para>例として、ドイツ語の文字 '<keycode>ä</keycode>' についてみてみる．
        Precomposed normalization を使えば Unicode はこの文字に 0xE4 を対応付ける．
        一方，decomposed normalization では 'ä' を正確には 0x61 と 0x308 の二つの文字に対応付ける．
        0x61 は 'a' に，0x308 は <emphasis>COMBINING
        DIAERESIS</emphasis>（訳注：いわゆるウムラウト）に対応付けられている．</para>

        <para>Netatalk では precomposed UTF-8 を
        <emphasis>UTF8</emphasis><indexterm>
            <primary>UTF8</primary>

            <secondary>Netatalk's precomposed UTF-8 encoding</secondary>
          </indexterm> と，decomposed UTF-8 を
        <emphasis>UTF8-MAC</emphasis><indexterm>
            <primary>UTF8-MAC</primary>

            <secondary>Netatalk's decomposed UTF-8 encoding</secondary>
          </indexterm> と呼ぶ．</para>

      </sect3>

      <sect3>
        <title>afpd とキャラクターセット</title>

        <para>新しい AFP 3.x も古い AFP 2.x クライアントも同時にサポートするために，
        afpd は使われている様々なキャラクターセット間の変換が可能であることを求められた．
        AFP 3.x クライアントは常に UTF8-MAC を，
        AFP 2.x クライアントは Apple コードページのうちの一つを使う．</para>

        <para>本稿執筆時点（訳注：原文の）で，
        netatalk は以下の Apple コードページをサポートしている：</para>

        <itemizedlist>
          <listitem>
            <para>MAC_CENTRALEUROPE</para>
          </listitem>

          <listitem>
            <para>MAC_CHINESE_SIMP</para>
          </listitem>

          <listitem>
            <para>MAC_CHINESE_TRAD</para>
          </listitem>

          <listitem>
            <para>MAC_CYRILLIC</para>
          </listitem>

          <listitem>
            <para>MAC_GREEK</para>
          </listitem>

          <listitem>
            <para>MAC_HEBREW</para>
          </listitem>

          <listitem>
            <para>MAC_JAPANESE</para>
          </listitem>

          <listitem>
            <para>MAC_KOREAN</para>
          </listitem>

          <listitem>
            <para>MAC_ROMAN</para>
          </listitem>

          <listitem>
            <para>MAC_TURKISH</para>
          </listitem>
        </itemizedlist>

        <para>afpd は三つの異なるキャラクターセットオプションを扱う：</para>

        <variablelist>
          <varlistentry>
            <term>unix charset<indexterm>
                <primary>unix charset</primary>

                <secondary>afpd's unix charset setting</secondary>
              </indexterm></term>

            <listitem>
              <para>これはオペレーティングシステムの内側で使われているコードページである．
              もし指定されていなければ，デフォルトで <option>UTF8</option> になる．
              もし <option>LOCALE</option> が指定されていて，
              システムが Unix locales をサポートしていれば，afpd はコードページを検出しようとし，
              afpd は検出したコードページを使って設定ファイルを読む．
              なので，ボリューム名やログインメッセージなどに拡張文字を使うことができる．
              <citerefentry>
                  <refentrytitle>afp.conf</refentrytitle>

                  <manvolnum>5</manvolnum>
                </citerefentry> を参照のこと．</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>mac charset<indexterm>
                <primary>mac charset</primary>

                <secondary>afpd's mac charset setting</secondary>
              </indexterm></term>

            <listitem>
              <para>既に述べたように，
              旧式の Mac OS クライアント（AFP 2.2 までのもの）は 
              afpd と通信するのにコードページを用いる．しかしながら，
              AFP プロトコルにはクライアントが使用しているコードページを解決するというサポートはない．
              もしほかのどこかで指定されていないと，
              afpd は <emphasis>MacRoman</emphasis> コードページが使われていると仮定する．
              クライアントが別のコードページ，
              例えば <emphasis>MacCyrillic</emphasis> を使っていたならば, 
              それを明示的に設定<emphasis role="bold">しなければならない</emphasis>だろう．
              <citerefentry>
                  <refentrytitle>afp.conf</refentrytitle>

                  <manvolnum>5</manvolnum>
                </citerefentry> を参照のこと．</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>vol charset<indexterm>
                <primary>vol charset</primary>

                <secondary>afpd's vol charset setting</secondary>
              </indexterm></term>

            <listitem>
              <para>これは afpd がディスク上のファイル名として使うべきキャラクターセットを定義する．
              デフォルトでは <option>unix
              charset</option> と同じである．もし <ulink
              url="http://www.gnu.org/software/libiconv/">iconv</ulink><indexterm>
                  <primary>Iconv</primary>

                  <secondary>iconv encoding conversion engine</secondary>
                </indexterm> がインストールしてあるならば，
                iconv が提供するキャラクターセットも使用することができる．</para>

              <para>afpd はファイルを unix のファイルシステムに保存する時，
              拡張マッキントッシュキャラクター，
              あるいは unix のファイル名として不正なキャラクターを保持しておく必要がある．
              初期のバージョンでは，いわゆる CAP エンコーディング<indexterm>
                  <primary>CAP encoding</primary>

                  <secondary>CAP style character encoding</secondary>
                </indexterm>を使った．拡張キャラクター (&gt;0x7F) は :xx 
              の 16 進数に変換される．例えば，アップルのロゴ (MacRoman:
              0xF0) は :f0 として保存される．
              いくつかの特殊なキャラクターも :xx という表記に変換される．
              '/' は :2f にエンコードされる．
              もし， <option>usedots</option> オプションが設定されていなければ，
              先頭のピリオド '.' は :2e にエンコードされる．</para>

              <para>本ドキュメントでのバージョンではファイル名のデフォルトエンコーディングとして
              <option>UTF8</option> を使っているにもかかわらず，'/' は ':' に変換される．
              欧米のユーザーにとって <option>vol charset = ISO-8859-15</option> 
              という設定が有用となるかもしれない．</para>

              <para>もし，あるキャラクターが <option>mac charset</option> から選定した 
              <option>vol charset</option> への変換ができない場合，
              afpd は CAP エンコードしたキャラクターとして保存するであろう．
              AFP3 のクライアントに対しては，afpd は UTF8 のキャラクターをまず <option>mac
              charset</option> に変換する．
              もしこの変換に失敗すると，マック上では -50 エラーを受け取るだろう．
              <emphasis>注意</emphasis>：
              可能な限り常に，デフォルトの UTF8 ボリュームフォーマットから離れないでいただきたい．
                            <citerefentry>
                  <refentrytitle>afp.conf</refentrytitle>

                  <manvolnum>5</manvolnum>
                </citerefentry> を参照のこと．</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>
    </sect2>

    <sect2 id="authentication">
      <title>認証<indexterm>
          <primary>Authentication</primary>

          <secondary>between AFP client and server</secondary>
        </indexterm></title>

      <sect3>
        <title>AFP 認証の基本</title>

        <para>Apple は AFP クライアントとサーバー間の認証のために 
        "User Authentication Modules"
          <indexterm>
            <primary>UAM</primary>

            <secondary>User Authentication Module</secondary>
          </indexterm> (UAM) と呼ばれる柔軟なモデルを選んだ．
        AFP クライアントがまず最初に AFP サーバーと接続するとき，
        サーバーが提供している UAM のリストを問い合わせる．
        そして，クライアントがサポートしている最も強い暗号化の UAM を選ぶ．</para>

        <para>数個の UAM は時間をかけて Apple が開発してものであり，
        サードパーティの開発者によるものもある．</para>
      </sect3>

      <sect3>
        <title>Netatalk でサポートされている UAM</title>

        <para>Netatalk はデフォルトで以下のものをサポートしている：</para>

        <itemizedlist>
          <listitem>
            <para>"No User Authent"<indexterm>
                <primary>No User Authent</primary>

                <secondary>"No User Authent" UAM (guest access)</secondary>
              </indexterm> UAM（ユーザー認証なしのゲスト接続）</para>
          </listitem>

          <listitem>
            <para>"Cleartxt Passwrd"<indexterm>
                <primary>Cleartxt Passwrd</primary>

                <secondary>"Cleartxt Passwrd" UAM</secondary>
              </indexterm> UAM（クリアテキスト(平文)パスワード，暗号化なし）</para>
          </listitem>

          <listitem>
            <para>"Randnum exchange"<indexterm>
                <primary>Randnum exchange</primary>

                <secondary>"Randnum exchange" UAM</secondary>
              </indexterm>，"2-Way Randnum exchange"<indexterm>
                <primary>2-Way Randnum exchange</primary>

                <secondary>"2-Way Randnum exchange" UAM</secondary>
              </indexterm> UAM
            （乱数交換・双方向乱数交換，弱いパスワード暗号化，パスワードを別途保存する）</para>
          </listitem>

          <listitem>
            <para>"DHCAST128"<indexterm>
                <primary>DHCAST128</primary>

                <secondary>"DHCAST128" UAM</secondary>
              </indexterm> UAM（より強いパスワード暗号化）</para>
          </listitem>

          <listitem>
            <para>"DHX2"<indexterm>
                <primary>DHX2</primary>

                <secondary>"DHX2" UAM</secondary>
              </indexterm> UAM（DHCAST128 の後継版）</para>
          </listitem>
        </itemizedlist>

        <para>他にもオプションとして以下のような UAM がある：</para>

        <itemizedlist>
          <listitem>
            <para>"PGPuam 1.0"<indexterm>
                <primary>PGPuam 1.0</primary>

                <secondary>"PGPuam 1.0" UAM</secondary>
              </indexterm><indexterm>
                <primary>uams_pgp.so</primary>

                <secondary>"PGPuam 1.0" UAM</secondary>
              </indexterm> UAM（Mac OS X 以前のクライアント用，PGP ベースの認証．
            これを動作させようとするには <ulink
            url="http://www.vmeng.com/vinnie/papers/pgpuam.html">PGPuam
            クライアント</ulink>も別途必要である．</para>

            <para>この UAM を有効にするためには，configure オプションに 
            <filename>"--enable-pgp-uam"</filename> を追加しなければならない．</para>
          </listitem>

          <listitem>
            <para>"Kerberos IV"<indexterm>
                <primary>Kerberos IV</primary>

                <secondary>"Kerberos IV" UAM</secondary>
              </indexterm><indexterm>
                <primary>uams_krb4.so</primary>

                <secondary>"Kerberos IV" UAM</secondary>
              </indexterm>/"AFS Kerberos"<indexterm>
                <primary>AFS Kerberos</primary>

                <secondary>"AFS Kerberos" UAM (Kerberos IV)</secondary>
              </indexterm> UAM
            （<ulink url="http://web.mit.edu/macdev/KfM/Common/Documentation/faq.html">
            Kerberos v4 ベースの認証</ulink>で AFS ファイルサーバーを使用するのに適している）
            </para>

            <para>この UAM を有効化するにはコンパイル時点で 
            <filename>"--enable-krb4-uam"</filename> オプションを使用する．</para>
          </listitem>

          <listitem>
            <para>"Client Krb v2"<indexterm>
                <primary>Client Krb v2</primary>

                <secondary>"Client Krb v2" UAM (Kerberos V)</secondary>
              </indexterm> UAM
            （Kerberos V，OS X で“シングルサインオン”環境には最も適当である――下記参照）</para>

            <para><filename>"--enable-krbV-uam"</filename> 
            オプションでこの UAM を使用できるようになるであろう．</para>
          </listitem>
        </itemizedlist>

        <para>"<option>uam list</option>" を <option>Global</option> 
        セクションで定義することによって，どの UAM を有効化すべきか設定できる．
        <command>afpd</command> はどの UAM を使っているのか，
        UAM を有効化した時に問題が起こっているのかどうかを， <filename>netatalk.log</filename> 
        あるいは起動時の syslog にログとして保存する．
        <citerefentry>
            <refentrytitle>asip-status.pl</refentrytitle>

            <manvolnum>1</manvolnum>
          </citerefentry>  
        も AFP サーバーで有効な UAM の問い合わせをするのに使うことができる．</para>

        <para>ある特定の UAM がサーバー上で有効であるということが，直ちに，
        クライアントもそれを使うことができるということを意味するわけではない．
        クライアント側でのサポートもまた必要である．
        Mac OS X 以前が使われている古いマッキントッシュでも，
        DHCAST128 のサポートは AppleShare クライアント 3.8.x 以降には存在している．</para>

        <para>OS X では，
        AFP クライアントをもっと冗長にするクライアント側のテクニックがいくつかあるので，
        使用する UAM と折り合いをつけるまでに何が起こっているのか見ることができる．<ulink
        url="http://article.gmane.org/gmane.network.netatalk.devel/7383/">このヒント</ulink>
        と比較してみるとよい．</para>
      </sect3>

      <sect3>
        <title>どの UAM を有効にすべきか？</title>

        <para>第一義的には“何が必要か”と
        “サポートしようと考えている MAC OS のバージョンの種類”に依存する．
        基本的にはそのパスワード暗号化の強力さから，
        可能な限り DHCAST128 および DHX2 を試すべきである．</para>

        <itemizedlist>
          <listitem>
            <para>サーバーのボリュームに本当にゲストアクセスを供することが必要な場合以外は，
            "No User Authent" が無効化されているか確認すべきである．
            さもないと，意図しない権限のないアクセスを引き起こすことにもなる．
            ゲストアクセスを有効にしなければならない場合は，
            アクセスコントロールを使って，
            ボリューム各々についてゲストアクセスを有効化することを強制化するように気を配るべきである．</para>
          </listitem>

          <listitem>
            <para>"ClearTxt Passwrd" UAM 
            ではパスワードがネットワーク上を暗号化されずに伝わっていくので，
            字句そのまんまに良くない．
            クライアント側のみならずサーバー側でも無効にするよう務めるべきである．
            注意：もし NetBoot サービスを使用している Mac OS 8/9 にサービスを提供したい場合，
            cleartext.so の UAM が必要となる．
            これはそういった Mac のファームウエアに組み込まれた AFP クライアントがこうした基本的な形の認証しか扱わないためである．</para>
          </listitem>

          <listitem>
            <para>"Randnum exchange" と "2-Way Randnum exchange" は 56 ビット DES 暗号化しか使わないので，
            これらもやはり回避すべきである．
            そしてなおかつ不利なのは，パスワードがサーバーに平文テキストして保存されること，
            および PAM 環境とも古典的な /etc/shadow とも統合がとれない
            （もしクライアントがこれらの UAM を使わなければならない場合，<citerefentry>
                <refentrytitle>afppasswd</refentrytitle>

                <manvolnum>1</manvolnum>
              </citerefentry>
            ユーティリティを使って別途パスワードを管理しなければならない）という点である．</para>
          </listitem>

          <listitem>
            <para>"DHCAST128" あるいは "DHX2" は PAM との統合と強力な暗号化とが組み合わせられているので，
            ほとんどの人々にとって良い妥協案であろう．</para>
          </listitem>

          <listitem>
            <para>Kerberos V<indexterm>
                <primary>Kerberos V</primary>

                <secondary>"Client Krb v2" UAM</secondary>
              </indexterm> 
            ("Client Krb v2") UAM を用いれば，
            Kerberos チケットを用いて真のシングルサインオン環境を実装することが可能である．
            パスワードがネットワークを通して送られることもない．
            その代わり，ユーザーのパスワードは appleshare サーバーへのサービスチケットを暗号から復号するのに用いられる．
            サービスチケットにはクライアントの暗号鍵と幾らかの暗号化されたデータが含まれる
            （それは appleshare サーバーだけが復号できる）．
            サービスチケットの暗号化された部分がサーバーに送られ，ユーザーを認証するのに使われる．
            afpd サービスの主な検知の実装の仕方のために，この認証方法は中間者攻撃に対して脆弱である．</para>
          </listitem>
        </itemizedlist>

        <para>様々な UAM の技術的実装についてのより詳細な概要については，Apple の <ulink
        url="http://developer.apple.com/library/mac/#documentation/Networking/Conceptual/AFP/AFPSecurity/AFPSecurity.html#//apple_ref/doc/uid/TP40000854-CH232-SW1">File
        Server Security</ulink> ページを見ていただきたい．</para>
      </sect3>

      <sect3>
        <title>Using different authentication sources with specific
        UAMs</title>

        <para>Some UAMs provide the ability to use different authentication
        "backends", namely <filename>uams_cleartext.so</filename>,
        <filename>uams_dhx.so</filename> and
        <filename>uams_dhx2.so</filename>. They can use either classic Unix
        passwords from <filename>/etc/passwd</filename>
        (<filename>/etc/shadow</filename>) or PAM if the system supports that.
        <filename>uams_cleartext.so</filename> can be symlinked to either
        <filename>uams_passwd.so</filename> or
        <filename>uams_pam.so</filename>, <filename>uams_dhx.so</filename> to
        <filename>uams_dhx_passwd.so</filename> or
        <filename>uams_dhx_pam.so</filename> and
        <filename>uams_dhx2.so</filename> to
        <filename>uams_dhx2_passwd.so</filename> or
        <filename>uams_dhx2_pam.so</filename>.</para>

        <para>So, if it looks like this in Netatalk's UAMs folder (per default
        <filename>/etc/netatalk/uams/</filename>):<programlisting>uams_clrtxt.so -&gt; uams_pam.so
uams_dhx.so -&gt; uams_dhx_pam.so
uams_dhx2.so -&gt; uams_dhx2_pam.so</programlisting> then you're using PAM,
        otherwise classic Unix passwords. The main advantage of using PAM is
        that one can integrate Netatalk in centralized authentication
        scenarios, eg. via LDAP, NIS and the like. Please always keep in mind
        that the protection of your user's login credentials in such scenarios
        also depends on the strength of encryption that the UAM in question
        supplies. So think about eliminating weak UAMs like "ClearTxt Passwrd"
        and "Randnum exchange" completely from your network.</para>
      </sect3>

      <sect3>
        <title>Netatalk UAM overview table</title>

        <para>A small overview of the most common used UAMs.</para>

        <table orient="land">
          <title>Netatalk UAM overview</title>

          <tgroup align="center" cols="7">
            <colspec colname="col1" colnum="1" colwidth="0.5*" />

            <colspec colname="uam_guest" colnum="2" colwidth="1*" />

            <colspec colname="uam_clrtxt" colnum="3" colwidth="1*" />

            <colspec colname="uam_randnum" colnum="4" colwidth="1*" />

            <colspec colname="uam_dhx" colnum="5" colwidth="1*" />

            <colspec colname="uam_dhx2" colnum="6" colwidth="1*" />

            <colspec colname="uam_gss" colnum="7" colwidth="1*" />

            <tbody>
              <row>
                <entry align="center" rotate="0" valign="middle">UAM</entry>

                <entry>No User Authent<indexterm>
                    <primary>uams_guest.so</primary>

                    <secondary>"No User Authent" UAM (guest
                    access)</secondary>
                  </indexterm></entry>

                <entry>Cleartxt Passwrd<indexterm>
                    <primary>uams_cleartxt.so</primary>

                    <secondary>"Cleartxt Passwrd" UAM</secondary>
                  </indexterm></entry>

                <entry>(2-Way) Randnum exchange<indexterm>
                    <primary>uams_randnum.so</primary>

                    <secondary>"(2-Way) Randnum exchange" UAM</secondary>
                  </indexterm></entry>

                <entry>DHCAST128<indexterm>
                    <primary>uams_dhx.so</primary>

                    <secondary>"DHCAST128" UAM</secondary>
                  </indexterm></entry>

                <entry>DHX2<indexterm>
                    <primary>uams_dhx2.so</primary>

                    <secondary>"DHX2" UAM</secondary>
                  </indexterm></entry>

                <entry>Client Krb v2<indexterm>
                    <primary>uams_gss.so</primary>

                    <secondary>"Client Krb v2" UAM (Kerberos V)</secondary>
                  </indexterm></entry>
              </row>

              <row>
                <entry align="center" rotate="0" valign="middle">pssword
                length</entry>

                <entry>guest access</entry>

                <entry>max. 8 characters</entry>

                <entry>max. 8 characters</entry>

                <entry>max. 64 characters</entry>

                <entry>max. 256 characters</entry>

                <entry>Kerberos tickets</entry>
              </row>

              <row>
                <entry align="center" rotate="0" valign="middle">Client
                support</entry>

                <entry>built-in into all Mac OS versions</entry>

                <entry>built-in in all Mac OS versions except 10.0. Has to be
                activated explicitly in recent Mac OS X versions</entry>

                <entry>built-in into almost all Mac OS versions</entry>

                <entry>built-in since AppleShare client 3.8.4, available as a
                plug-in for 3.8.3, integrated in Mac OS X' AFP client</entry>

                <entry>built-in since Mac OS X 10.2</entry>

                <entry>built-in since Mac OS X 10.2</entry>
              </row>

              <row>
                <entry align="center" rotate="0"
                valign="middle">Encryption</entry>

                <entry>Enables guest access without authentication between
                client and server.</entry>

                <entry>Password will be sent in cleartext over the wire. Just
                as bad as it sounds, therefore avoid at all if possible (note:
                providing NetBoot services requires the ClearTxt UAM)</entry>

                <entry>8-byte random numbers are sent over the wire,
                comparable with DES, 56 bits. Vulnerable to offline dictionary
                attack. Requires passwords in clear on the server.</entry>

                <entry>Password will be encrypted with 128 bit SSL, user will
                be authenticated against the server but not vice versa.
                Therefor weak against man-in-the-middle attacks.</entry>

                <entry>Password will be encrypted using libgcrypt with CAST
                128 in CBC mode. User will be authenticated against the server
                but not vice versa. Therefor weak against man-in-the-middle
                attacks.</entry>

                <entry>Password is not sent over the network. Due to the
                service principal detection method, this authentication method
                is vulnerable to man-in-the-middle attacks.</entry>
              </row>

              <row>
                <entry align="center" rotate="0" valign="middle">Server
                support</entry>

                <entry align="center" valign="middle">uams_guest.so</entry>

                <entry align="center" valign="middle">uams_cleartxt.so</entry>

                <entry align="center" valign="middle">uams_randnum.so</entry>

                <entry align="center" valign="middle">uams_dhx.so</entry>

                <entry align="center" valign="middle">uams_dhx2.so</entry>

                <entry align="center" valign="middle">uams_gss.so</entry>
              </row>

              <row>
                <entry align="center" rotate="0" valign="middle">Password
                storage method</entry>

                <entry align="center" valign="middle">None</entry>

                <entry align="center" valign="middle">Either /etc/passwd
                (/etc/shadow) or PAM</entry>

                <entry align="center" valign="middle">Passwords stored in
                clear text in a separate text file</entry>

                <entry align="center" valign="middle">Either /etc/passwd
                (/etc/shadow) or PAM</entry>

                <entry align="center" valign="middle">Either /etc/passwd
                (/etc/shadow) or PAM</entry>

                <entry align="center" valign="middle">At the Kerberos Key
                Distribution Center*</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>* Have a look at this <ulink
        url="http://cryptnet.net/fdp/admin/kerby-infra/en/kerby-infra.html">Kerberos
        overview</ulink></para>
      </sect3>

      <sect3 id="sshtunnel">
        <title>SSH tunneling</title>

        <para>Tunneling and all sort of VPN stuff has nothing to do with AFP
        authentication and UAMs in general. But since Apple introduced an
        option called "Allow Secure Connections Using SSH" and many people
        tend to confuse both things, we'll speak about that here too.</para>

        <sect4 id="manualsshtunnel">
          <title>Manually tunneling an AFP session</title>

          <para>This works since the first AFP servers that spoke "AFP over
          TCP" appeared in networks. One simply tunnels the remote server's
          AFP port to a local port different than 548 and connects locally to
          this port afterwards. On OS X this can be done by</para>

          <programlisting>ssh -l $USER $SERVER -L 10548:127.0.0.1:548 sleep 3000</programlisting>

          <para>After establishing the tunnel one will use
          <filename>"afp://127.0.0.1:10548"</filename> in the "Connect to
          server" dialog. All AFP traffic including the initial connection
          attempts will be sent encrypted over the wire since the local AFP
          client will connect to the Mac's local port 10548 which will be
          forwarded to the remote server's AFP port (we used the default 548)
          over SSH.</para>

          <para>These sorts of tunnels are an ideal solution if you've to
          access an AFP server providing weak authentications mechanisms
          through the Internet without having the ability to use a "real" VPN.
          Note that you can let <command>ssh</command> compress the data by
          using its "-C" switch and that the tunnel endpoints can be different
          from both AFP client and server (compare with the SSH documentation
          for details).</para>
        </sect4>

        <sect4 id="autosshtunnel">
          <title>Automatically establishing a tunneled AFP connection</title>

          <para>From Mac OS X 10.2 to 10.4, Apple added an "Allow Secure
          Connections Using SSH" checkbox to the "Connect to Server" dialog.
          The idea behind: When the server signals that it can be contacted by
          SSH then Mac OS X' AFP client tries to establish the tunnel and
          automagically sends all AFP traffic through it.</para>

          <para>But it took until the release of Mac OS X 10.3 that this
          feature worked the first time... partly. In case, the SSH tunnel
          can't be established the AFP client <emphasis
          role="strong">silently</emphasis> fell back to an unencrypted AFP
          connection attempt.</para>

          <para>Netatalk's afpd will report that it is capable of handling SSH
          tunneled AFP requests, when both "<option>advertise ssh</option>"
          and "<option>fqdn</option>" options are set in
          <option>Global</option> section (double check with <citerefentry>
              <refentrytitle>asip-status.pl</refentrytitle>

              <manvolnum>1</manvolnum>
            </citerefentry> after you restarted afpd when you made changes to
          the settings). But there are a couple of reasons why you don't want
          to use this option at all:</para>

          <itemizedlist>
            <listitem>
              <para>Tunneling TCP over TCP (as SSH does) is not the best idea.
              There exist better solutions like VPNs based on the IP
              layer.</para>
            </listitem>

            <listitem>
              <para>Since this SSH kludge isn't a normal UAM that integrates
              directly into the AFP authentication mechanisms but instead uses
              a single flag signalling clients whether they can <emphasis
              role="strong">try</emphasis> to establish a tunnel or not, it
              makes life harder to see what's happening when things go
              wrong.</para>
            </listitem>

            <listitem>
              <para>You cannot control which machines are logged on by
              Netatalk tools like a <command>macusers</command> since all
              connection attempts seem to be made from localhost.</para>
            </listitem>

            <listitem>
              <para>On the other side you've to limit access to afpd to
              localhost only (TCP wrappers) when you want to ensure that all
              AFP sessions are SSH encrypted or...</para>
            </listitem>

            <listitem>
              <para>...when you're using 10.2 - 10.3.3 then you get the
              opposite of what you'd expect: potentially unencrypted AFP
              communication (including logon credentials) on the network
              without a single notification that establishing the tunnel
              failed. Apple fixed that not until Mac OS X 10.3.4.</para>
            </listitem>

            <listitem>
              <para>Encrypting all AFP sessions via SSH can lead to a
              significantly higher load on the Netatalk server</para>
            </listitem>
          </itemizedlist>
        </sect4>
      </sect3>
    </sect2>

    <sect2 id="acls">
      <title>ACL Support<indexterm>
          <primary>ACLs</primary>
        </indexterm></title>

      <para>ACL support for AFP is implemented for ZFS ACLs on Solaris and
      derived platforms and for POSIX 1e ACLs on Linux.</para>

      <sect3>
        <title>Configuration</title>

        <para>For a basic mode of operation there's nothing to configure.
        Netatalk reads ACLs on the fly and calculates effective permissions
        which are then send to the AFP client via the so called
        UARights<indexterm>
            <primary>UARights</primary>
          </indexterm> permission bits. On a Mac, the Finder uses these bits
        to adjust permission in Finder windows. For example folder whos UNIX
        mode would only result in in read-only permissions for a user will not
        be displayed with a read-only icon and the user will be able to write
        to the folder given the folder has an ACL giving the user write
        access.</para>

        <para>By default, the effective permission of the authenticated user
        are only mapped to the mentioned UARights<indexterm>
            <primary>UARights</primary>
          </indexterm>permission structure, not the UNIX mode. You can adjust
        this behaviour with the configuration option <link
        linkend="map_acls">map acls</link>.</para>

        <para>However, neither in Finder "Get Info" windows nor in Terminal
        will you be able to see the ACLs, that's a result of how ACLs in OS X
        are designed. If you want to be able to display ACLs on the client,
        things get more involved as you must then setup both client and server
        to be part on a authentication domain (directory service, eg LDAP,
        OpenDirectory). The reason is, that in OS X ACLs are bound to UUIDs,
        not just uid's or gid's. Therefor afpd must be able to map every
        filesystem uid and gid to a UUID so that it can return the server side
        ACLs which are bound to UNIX uid and gid mapped to OS X UUIDs.</para>

        <para>Netatalk can query a directory server using LDAP queries. Either
        the directory server already provides an UUID attribute for user and
        groups (Active Directory, Open Directory) or you reuse an unused
        attribute (or add a new one) to you directory server (eg
        OpenLDAP).</para>

        <para>In detail:</para>

        <orderedlist>
          <listitem>
            <para>For Solaris/ZFS: ZFS Volumes</para>

            <para>You should configure a ZFS ACL know for any volume you want
            to use with Netatalk:</para>

            <screen>aclinherit = passthrough
aclmode = passthrough</screen>

            <para>For an explanation of what this knob does and how to apply
            it, check your hosts ZFS documentation (eg man zfs).</para>
          </listitem>

          <listitem>
            <para>Authentication Domain</para>

            <para>Your server and the clients must be part of a security
            association where identity data is coming from a common source.
            ACLs in Darwin are based on UUIDs and so is the ACL specification
            in AFP 3.2. Therefor your source of identity data has to provide
            an attribute for every user and group where a UUID is stored as a
            ASCII string. In other words:</para>

            <itemizedlist>
              <listitem>
                <para>you need an Open Directory Server or an LDAP server
                where you store UUIDs in some attribute</para>
              </listitem>

              <listitem>
                <para>your clients must be configured to use this
                server</para>
              </listitem>

              <listitem>
                <para>your server should be configured to use this server via
                nsswitch and PAM</para>
              </listitem>

              <listitem>
                <para>configure Netatalk via the special <link
                linkend="acl_options">LDAP options for ACLs</link> in <link
                linkend="afp.conf.5">afp.conf</link> so that Netatalk is able
                to retrieve the UUID for users and groups via LDAP search
                queries</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </sect3>

      <sect3>
        <title>OS X ACLs</title>

        <para>With Access Control Lists (ACLs) Mac OS X offers a powerful
        extension of the traditional UNIX permissions model. An ACL is an
        ordered list of Access Control Entries (ACEs) explicitly granting or
        denying a set of permissions to a given user or group.</para>

        <para>Unlike UNIX permissions, which are bound to user or group IDs,
        ACLs are tied to UUIDs. For this reason accessing an object's ACL
        requires server and client to use a common directory service which
        translates between UUIDs and user/group IDs.</para>

        <para>ACLs and UNIX permissions interact in a rather simple way. As
        ACLs are optional UNIX permissions act as a default mechanism for
        access control. Changing an objects's UNIX permissions will leave it's
        ACL intact and modifying an ACL will never change the object's UNIX
        permissions. While doing access checks, OS X first examines an
        object's ACL evaluating ACEs in order until all requested rights have
        been granted, a requested right has been explicitly denied by an ACE
        or the end of the list has been reached. In case there is no ACL or
        the permissions granted by the ACL are not sufficient to fulfill the
        request, OS X next evaluates the object's UNIX permissions. Therefore
        ACLs always have precedence over UNIX permissions.</para>
      </sect3>

      <sect3>
        <title>ZFS ACLs</title>

        <para>ZFS ACLs closely match OS X ACLs. Both offer mostly identical
        fine grained permissions and inheritance settings.</para>
      </sect3>

      <sect3>
        <title>POSIX ACLs</title>

        <sect4>
          <title>Overview</title>

          <para>Compared to OS X or NFSv4 ACLs, Posix ACLs represent a
          different, less versatile approach to overcome the limitations of
          the traditional UNIX permissions. Implementations are based on the
          withdrawn Posix 1003.1e standard.</para>

          <para>The standard defines two types of ACLs. Files and directories
          can have access ACLs which are consulted for access checks.
          Directories can also have default ACLs irrelevant to access checks.
          When a new object is created inside a directory with a default ACL,
          the default ACL is applied to the new object as it's access ACL.
          Subdirectories inherit default ACLs from their parent. There are no
          further mechanisms of inheritance control.</para>

          <para>Architectural differences between Posix ACLs and OS X ACLs
          especially involve:</para>

          <para><itemizedlist>
              <listitem>
                <para>No fine-granular permissions model. Like UNIX
                permissions Posix ACLs only differentiate between read, write
                and execute permissions.</para>
              </listitem>

              <listitem>
                <para>Entries within an ACL are unordered.</para>
              </listitem>

              <listitem>
                <para>Posix ACLs can only grant rights. There is no way to
                explicitly deny rights by an entry.</para>
              </listitem>

              <listitem>
                <para>UNIX permissions are integrated into an ACL as special
                entries.</para>
              </listitem>
            </itemizedlist></para>

          <para>Posix 1003.1e defines 6 different types of ACL entries. The
          first three types are used to integrate standard UNIX permissions.
          They form a minimal ACL, their presence is mandatory and only one
          entry of each type is allowed within an ACL.</para>

          <para><itemizedlist>
              <listitem>
                <para>ACL_USER_OBJ: the owner's access rights.</para>
              </listitem>

              <listitem>
                <para>ACL_GROUP_OBJ: the owning group's access rights.</para>
              </listitem>

              <listitem>
                <para>ACL_OTHER: everybody's access rights.</para>
              </listitem>
            </itemizedlist></para>

          <para>The remaining entry types expand the traditional permissions
          model:</para>

          <para><itemizedlist>
              <listitem>
                <para>ACL_USER: grants access rights to a certain user.</para>
              </listitem>

              <listitem>
                <para>ACL_GROUP: grants access rights to a certain
                group.</para>
              </listitem>

              <listitem>
                <para>ACL_MASK: limits the maximum access rights which can be
                granted by entries of type ACL_GROUP_OBJ, ACL_USER and
                ACL_GROUP. As the name suggests, this entry acts as a mask.
                Only one ACL_MASK entry is allowed per ACL. If an ACL contains
                ACL_USER or ACL_GROUP entries, an ACL_MASK entry must be
                present too, otherwise it is optional.</para>
              </listitem>
            </itemizedlist></para>

          <para>In order to maintain compatibility with applications not aware
          of ACLs, Posix 1003.1e changes the semantics of system calls and
          utilities which retrieve or manipulate an objects UNIX permissions.
          In case an object only has a minimal ACL, the group permissions bits
          of the UNIX permissions correspond to the value of the ACL_GROUP_OBJ
          entry.</para>

          <para>However, if the ACL also contains an ACL_MASK entry, the
          behavior of those system calls and utilities is different. The group
          permissions bits of the UNIX permissions correspond to the value of
          the ACL_MASK entry, i. e. calling "chmod g-w" will not only revoke
          write access for the group, but for all entities which have been
          granted write access by ACL_USER or ACL_GROUP entries.</para>
        </sect4>

        <sect4>
          <title>Mapping POSIX ACLs to OS X ACLs</title>

          <para>When a client wants to read an object's ACL, afpd maps it's
          Posix ACL onto an equivalent OS X ACL. Writing an object's ACL
          requires afpd to map an OS X ACL onto a Posix ACL. Due to
          architectural restrictions of Posix ACLs, it is usually impossible
          to find an exact mapping so that the result of the mapping process
          will be an approximation of the original ACL's semantic.</para>

          <para><itemizedlist>
              <listitem>
                <para>afpd silently discard entries which deny a set of
                permissions because they they can't be represented within the
                Posix architecture.</para>
              </listitem>

              <listitem>
                <para>As entries within Posix ACLs are unordered, it is
                impossible to preserve order.</para>
              </listitem>

              <listitem>
                <para>Inheritance control is subject to severe limitations as
                well:<itemizedlist>
                    <listitem>
                      <para>Entries with the only_inherit flag set will only
                      become part of the directory's default ACL.</para>
                    </listitem>

                    <listitem>
                      <para>Entries with at least one of the flags
                      file_inherit, directory_inherit or limit_inherit set,
                      will become part of the directory's access and default
                      ACL, but the restrictions they impose on inheritance
                      will be ignored.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>

              <listitem>
                <para>The lack of a fine-granular permission model on the
                Posix side will normally result in an increase of granted
                permissions.</para>
              </listitem>
            </itemizedlist></para>

          <para>As OS X clients aren't aware of the Posix 1003.1e specific
          relationship between UNIX permissions and ACL_MASK, afpd does not
          expose this feature to the client to avoid compatibility issues and
          handles *unix permissions and ACLs the same way as Apple's reference
          implementation of AFP does. When an object's UNIX permissions are
          requested, afpd calculates proper group rights and returns the
          result together with the owner's and everybody's access rights to
          the caller via "permissions" and "ua_permissions" members of the
          FPUnixPrivs structure (see Apple Filing Protocol Reference, page
          181). Changing an object's permissions, afpd always updates
          ACL_USER_OBJ, ACL_GROUP_OBJ and ACL_OTHERS. If an ACL_MASK entry is
          present too, afpd recalculates it's value so that the new group
          rights become effective and existing entries of type ACL_USER or
          ACL_GROUP stay intact.</para>
        </sect4>
      </sect3>
    </sect2>

    <sect2 id="fce">
      <title>Filesystem Change Events<indexterm>
          <primary>FCE</primary>
        </indexterm></title>

      <para>Netatalk includes a nifty filesystem change event mechanism where
      afpd processes notfiy interested listeners about certain filesystem
      event by UDP network datagrams.</para>

      <para>For the format of the UDP packets and for an example C application
      that demonstrates how to use these in a listener, take a look at the
      Netatalk sourcefile <filename>bin/misc/fce.c</filename>.</para>

      <para>The currently supported FCE events are<itemizedlist>
          <listitem>
            <para>file modification (fmod)</para>
          </listitem>

          <listitem>
            <para>file deletion (fdel)</para>
          </listitem>

          <listitem>
            <para>directory deletion (ddel)</para>
          </listitem>

          <listitem>
            <para>file creation (fcre)</para>
          </listitem>

          <listitem>
            <para>directory deletion (ddel)</para>
          </listitem>
        </itemizedlist></para>

      <para>For details on the available simple configuration options take a
      look at <filename><link
      linkend="fceconf">afp.conf</link></filename>.</para>
    </sect2>
  </sect1>

  <sect1>
    <title id="spotlight">Spotlight<indexterm>
        <primary>Spotlight</primary>
      </indexterm></title>

    <para>Starting with version 3.1 Netatalk supports Spotlight searching.
    Netatalk uses Gnome <ulink url="https://projects.gnome.org/tracker/">Tracker</ulink> as metadata store,
    indexer and search engine.</para>

    <sect2>
      <title>Configuration</title>

      <para>You can enable Spotlight and indexing either globally or on a per
      volume basis with the <option>spotlight</option> option.</para>

      <warning>
        <para>Once Spotlight is enable for a single volume, all other volumes
        for which spotlight is disabled won't be searchable at all.</para>
      </warning>

      <para>In case the <command>dbus-daemon</command> binary is not installed
      at the path <filename>/bin/dbus-daemon</filename>, you must use the
      global option <option>dbus daemon</option> to point to the path, eg for
      Solaris with Tracker from OpenCSW: <screen>dbus daemon = /opt/csw/bin/dbus-daemon</screen></para>
    </sect2>

    <sect2>
      <title>Limitations and notes</title>

      <itemizedlist>
        <listitem>
          <para>Large filesystems</para>

          <para>Tracker on Linux uses the inotify Kernel filesystem change
          event API for tracking filesystem changes. On large filesystems this
          may be problematic since the inotify API doesn't offer recursive
          directory watches but instead requires that for every subdirectoy
          watches must be added individually.</para>

          <para>On Solaris the FEN file event notification system is used. It
          is unkown which limitations and ressource consumption this Solaris
          subsystem may have.</para>

          <para>We therefor recommend to disable live filesystem monitoring
          and let Tracker periodically scan filesystems for changes instead,
          see the Tracker configuration options <link
          linkend="enable-monitors">enable-monitors</link> and <link
          linkend="crawling-interval">crawling-interval</link> below.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Using Tracker commandline tools on the server</title>

      <para>Netatalk must be running, commands must be executed as root and
      some environent variables must be set up (adjust PREFIX to point to
      the base directory Netatalk in installed to):<screen>$ su
# cat .tracker_profile
PREFIX="/"
export XDG_DATA_HOME="$PREFIX/var/netatalk/"
export XDG_CACHE_HOME="$PREFIX/var/netatalk/"
export DBUS_SESSION_BUS_ADDRESS="unix:path=$PREFIX/var/netatalk/spotlight.ipc"
# . .tracker_profile
#
</screen></para>

      <para>When using Tracker from OpenCSW you must also update your
      PATH:<screen># export PATH=/opt/csw/bin:$PATH</screen></para>

      <sect3>
        <title>Starting and stopping Tracker</title>

        <variablelist>
          <varlistentry>
            <term>Querying Tracker status</term>

            <listitem>
              <screen># tracker-control -S</screen>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Stop Tracker</term>

            <listitem>
              <screen># tracker-control -t</screen>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Start Tracker status</term>

            <listitem>
              <screen># tracker-control -s</screen>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <sect3>
        <title>Reindex directory</title>

        <screen># tracker-control -f PATH</screen>
      </sect3>

      <sect3>
        <title>Query Tracker for information about a file or directory</title>

        <screen># tracker-info PATH</screen>
      </sect3>

      <sect3>
        <title>Search Tracker</title>

        <screen># tracker-search QUERY</screen>
      </sect3>
    </sect2>

    <sect2>
      <title>Advanced Tracker command line configuration</title>

      <para>Tracker stores its configuration via Gnome dconf backend which can
      be modified with the command <command>gsettings</command>.</para>

      <para>Gnome dconf settings are per-user settings, so, as Netatalk runs
      the Tracker processes as root, the settings are stored in the root user
      context and reading or changing these settings must be perfomed as root
      and Netatalk must be running (and again the enviroment must be set up
      as shown above).</para>

      <para><screen># gsettings list-recursively | grep Tracker
org.freedesktop.Tracker.Writeback verbosity 'debug'
...</screen></para>

      <para>The following list describes some important Tracker options and
      their default settings.</para>

      <variablelist>
        <varlistentry>
          <term>org.freedesktop.Tracker.Miner.Files
          index-recursive-directories</term>

          <listitem>
            <para>This option controls which directories Tracker will index.
            Don't change this option manually as it is automatically set by
            Netatalk reflecting the setting of the <option>Spotlight</option>
            option of Netatalk volumes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term id="enable-monitors">org.freedesktop.Tracker.Miner.Files
          enable-monitors <parameter> true</parameter></term>

          <listitem>
            <para>The value controls whether Tracker watches all configured
            paths for modification. Depending on the filesystem modification
            backend (FAM on Linux, FEN on Solaris), this feature may not work
            as reliable as one might wish, so it may be safer to disable it
            and instead rely on periodic crawling of Tracker itself. See aslo
            the option <option>crawling-interval </option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term id="crawling-interval">org.freedesktop.Tracker.Miner.Files
          crawling-interval <parameter>-1</parameter></term>

          <listitem>
            <para>Interval in days to check the filesystem is up to date in
            the database, maximum is 365, default is -1. -2 = crawling is
            disabled entirely, -1 = crawling *may* occur on startup (if not
            cleanly shutdown), 0 = crawling is forced</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title>Supported metadata attributes</title>

      <para>The following table lists the supported Spotlight metadata
      attributes</para>

      <table>
        <title>Supported Spotlight metadata attributes</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Description</entry>

              <entry align="center">Spotlight Key</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Name</entry>

              <entry>kMDItemDisplayName, kMDItemFSName</entry>
            </row>

            <row>
              <entry>Document content (full text search)</entry>

              <entry>kMDItemTextContent</entry>
            </row>

            <row>
              <entry>File type</entry>

              <entry>_kMDItemGroupId, kMDItemContentTypeTree</entry>
            </row>

            <row>
              <entry>File modification date</entry>

              <entry>kMDItemFSContentChangeDate,
              kMDItemContentModificationDate,
              kMDItemAttributeChangeDate</entry>
            </row>

            <row>
              <entry>Content Creation date</entry>

              <entry>kMDItemContentCreationDate</entry>
            </row>

            <row>
              <entry>The author, or authors, of the contents of the
              file</entry>

              <entry>kMDItemAuthors, kMDItemCreator</entry>
            </row>

            <row>
              <entry>The name of the country where the item was
              created</entry>

              <entry>kMDItemCountry</entry>
            </row>

            <row>
              <entry>Duration</entry>

              <entry>kMDItemDurationSeconds</entry>
            </row>

            <row>
              <entry>Number of pages</entry>

              <entry>kMDItemNumberOfPages</entry>
            </row>

            <row>
              <entry>Document title</entry>

              <entry>kMDItemTitle</entry>
            </row>

            <row>
              <entry>The width, in pixels, of the contents. For example, the
              image width or the video frame width</entry>

              <entry>kMDItemPixelWidth</entry>
            </row>

            <row>
              <entry>The height, in pixels, of the contents. For example, the
              image height or the video frame height</entry>

              <entry>kMDItemPixelHeight</entry>
            </row>

            <row>
              <entry>The color space model used by the document
              contents</entry>

              <entry>kMDItemColorSpace</entry>
            </row>

            <row>
              <entry>The number of bits per sample</entry>

              <entry>kMDItemBitsPerSample</entry>
            </row>

            <row>
              <entry>Focal length of the lens, in millimeters</entry>

              <entry>kMDItemFocalLength</entry>
            </row>

            <row>
              <entry>ISO speed</entry>

              <entry>kMDItemISOSpeed</entry>
            </row>

            <row>
              <entry>Orientation of the document. Possible values are 0
              (landscape) and 1 (portrait)</entry>

              <entry>kMDItemOrientation</entry>
            </row>

            <row>
              <entry>Resolution width, in DPI</entry>

              <entry>kMDItemResolutionWidthDPI</entry>
            </row>

            <row>
              <entry>Resolution height, in DPI</entry>

              <entry>kMDItemResolutionHeightDPI</entry>
            </row>

            <row>
              <entry>Exposure time, in seconds</entry>

              <entry>kMDItemExposureTimeSeconds</entry>
            </row>

            <row>
              <entry>The composer of the music contained in the audio
              file</entry>

              <entry>kMDItemComposer</entry>
            </row>

            <row>
              <entry>The musical genre of the song or composition</entry>

              <entry>kMDItemMusicalGenre</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

    </sect2>

    <sect2>
      <title>References</title>

      <orderedlist>
        <listitem>
          <para><ulink
          url="https://developer.apple.com/library/mac/#documentation/Carbon/Reference/MDItemRef/Reference/reference.html">MDItem</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="https://live.gnome.org/Tracker/Documentation">Tracker</ulink></para>
        </listitem>
      </orderedlist>
    </sect2>
  </sect1>

  <sect1>
    <title>Starting and stopping Netatalk</title>

    <para>The Netatalk distribution comes with several operating system
    specific startup script templates that are tailored according to the
    options given to the "configure" script before compiling. Currently,
    templates are provided for RedHat (sysv style), RedHat (systemd style),
    SUSE (sysv style), SUSE (systemd style), Gentoo, NetBSD, Debian and
    Solaris. You can select to install the generated startup script(s)
    <indexterm>
        <primary>Startscript</primary>

        <secondary>startup script</secondary>
      </indexterm> by specifying a system type to "configure". To
    automatically install startup scripts give one of the available
    <option>--with-init-style</option> option to "configure".</para>

    <para>Since new releases of Linux distributions appear all the time and
    the startup procedure for the other systems mentioned above might change
    as well, it is probably a good idea to not blindly install a startup
    script but to look at it first to see if it will work on your system. If
    you use Netatalk as part of a fixed setup, like a Linux distribution, an
    RPM or a BSD package, things will probably have been arranged properly for
    you. The following therefore applies mostly for people who have compiled
    Netatalk themselves.</para>

    <para>The following daemon need to be started by whatever startup script
    mechanism is used:</para>

    <itemizedlist>
      <listitem>
        <para>netatalk<indexterm>
            <primary>netatalk</primary>
          </indexterm></para>
      </listitem>
    </itemizedlist>

    <para>Additionally, make sure that the configuration file
    <filename>afp.conf</filename> is in the right place.</para>
  </sect1>
</chapter>
